#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

source /var/vcap/packages/common/utils.sh

JOB_NAME=docker
DOCKER_RUN_DIR=$RUN_DIR/$JOB_NAME
DOCKER_LOG_DIR=$LOG_DIR/$JOB_NAME
DOCKER_JOB_DIR=$JOB_DIR/$JOB_NAME
DOCKER_PACKAGE_DIR=$PACKAGE_DIR/docker
DOCKER_DAEMON_PIDFILE=$DOCKER_RUN_DIR/dockerd.pid
DOCKER_DAEMON_SOCK=$DOCKER_RUN_DIR/dockerd.sock
DOCKER_STORAGE_DRIVER_VALUE=overlay2
export PATH=$PATH:${DOCKER_PACKAGE_DIR}/bin

CTL_CMD=/sbin/start-stop-daemon
DOCKERD_CMD=${DOCKER_PACKAGE_DIR}/bin/dockerd
DOCKER_HOST="unix://$DOCKER_DAEMON_SOCK"

# Make sure folders are ready
for dir in $DOCKER_RUN_DIR $DOCKER_LOG_DIR ; do
  mkdir -p ${dir}
  chown vcap:vcap ${dir}
  chmod 755 ${dir}
done

exec 1>> $DOCKER_LOG_DIR/ctl.stdout.log
exec 2>> $DOCKER_LOG_DIR/ctl.stderr.log

source $DOCKER_JOB_DIR/bin/properties.sh

# Set ulimits
export DOCKER_ULIMIT_NOFILE='<%= p('ulimit_nofile') %>'
ulimit -n ${DOCKER_ULIMIT_NOFILE}

# Set vm.max_map_count
export DOCKER_VM_MAX_MAP_COUNT='<%= p('vm.max_map_count') %>'
[ -n "${DOCKER_VM_MAX_MAP_COUNT}" ] && sysctl -w vm.max_map_count=${DOCKER_VM_MAX_MAP_COUNT}

# Setup docker environment
$DOCKER_JOB_DIR/bin/setup-env

# Start dockerd daemon
startDockerd() {
  OPT="--data-root ${DATA_ROOT_DIR} --host $DOCKER_HOST --pidfile $DOCKER_DAEMON_PIDFILE"
  exec $DOCKERD_CMD $OPT \
    1>>$DOCKER_LOG_DIR/dockerd.stdout.log \
    2>>$DOCKER_LOG_DIR/dockerd.stderr.log &
}

# Stop dockerd daemon
stopDockerd() {
  if $CTL_CMD --pidfile $DOCKER_DAEMON_PIDFILE --retry TERM/30/QUIT/5/KILL --oknodo --stop; then
    rm -f $DOCKER_DAEMON_PIDFILE
    rm -f $DOCKER_DAEMON_SOCK
  fi
}

COMMAND="${1:-}"

case "$COMMAND" in

  start)
    if [ ! -d $DATA_ROOT_DIR ]; then
      mkdir -p $DATA_ROOT_DIR
      chmod 770 $DATA_ROOT_DIR
    fi

    log "Starting docker daemon..."
    startDockerd
    waitForDockerd
    ;;

  stop)
    log "Stopping docker containers..."
    containers="$(docker -H $DOCKER_HOST ps -q)"
    if [[ ! -z $containers ]]; then
      for container in $containers
        do
          log "Stopping docker container ${container}"
          docker -H $DOCKER_HOST stop ${container}
        done
    fi

    log "Stopping docker daemon..."
    stopDockerd
    
    mounts=$(cat /proc/mounts | grep "/var/vcap/store/docker/${DOCKER_STORAGE_DRIVER_VALUE}/.*" | awk '{print $2}')
    for mount in $mounts; do
      echo "Unmounting $mount"
      umount $mount
    done

    if [[ -d /var/vcap/store/docker/${DOCKER_STORAGE_DRIVER_VALUE} ]]; then
      set +e
      echo "Unmounting /var/vcap/store/docker/${DOCKER_STORAGE_DRIVER_VALUE}"
      umount /var/vcap/store/docker/${DOCKER_STORAGE_DRIVER_VALUE}
      set -e
    fi

    if [[ -d /var/vcap/store/docker ]]; then
      set +e
      echo "Unmounting /var/vcap/store/docker"
      umount /var/vcap/store/docker
      set -e
    fi
    ;;    

  *)
    log "Usage: ctl [start|stop]"
    exit 0
    ;;

esac

log "ctl $COMMAND is successfully done!"
exit 0
