#!/usr/bin/env bash

set -e # exit immediately if a simple command exits with a non-zero status

[ -z "${DEBUG:-}" ] || set -x

source /var/vcap/packages/common/utils.sh

PACKAGE_DIR=/var/vcap/packages
JOB_NAME=harbor
HARBOR_JOB_DIR=/var/vcap/jobs/$JOB_NAME
HARBOR_PACKAGE_DIR=${PACKAGE_DIR}/harbor-app
HARBOR_PERSISTED_DATA=/var/vcap/store/$JOB_NAME
HARBOR_IMAGES_TAR_PATH=${HARBOR_PACKAGE_DIR}/harbor*.tar
HARBOR_DATA=/data
HARBOR_DB_BACKUP_DIR=$HARBOR_DATA/db_backup
HARBOR_VERSION_FILE=$HARBOR_DATA/harbor_version
CFG_FILE=${HARBOR_JOB_DIR}/config/harbor.cfg
CRON_PATH=/etc/cron.d/$JOB_NAME
CERTS_D=/etc/docker/certs.d
PYTHON_CMD=${PACKAGE_DIR}/python/python2.7/bin/python

source $PACKAGE_DIR/harbor-common/common.sh
source $HARBOR_JOB_DIR/bin/properties.sh

log "Installing Harbor $HARBOR_FULL_VERSION"

#Make sure folders are ready
for dir in $HARBOR_PERSISTED_DATA ; do
  mkdir -p ${dir}
  chown vcap:vcap ${dir}
  chmod 755 ${dir}
done

#Link Harbor Data dir to Bosh Persistent Disk
#See https://bosh.io/docs/persistent-disks.html
ln -sfT $HARBOR_PERSISTED_DATA $HARBOR_DATA

if [ ! -f $HARBOR_VERSION_FILE ]; then
  touch $HARBOR_VERSION_FILE
fi

if [ -d $HARBOR_DATA/database ]; then
  sed -i -r "s/reload_config\=false/reload_config\=true/" $CFG_FILE
fi

INSTALLED_HARBOR_VERSION=`cat $HARBOR_VERSION_FILE`

<%- if p("populate_etc_hosts") %>
#Populate /etc/hosts
fqdn=<%= p("hostname") %>
ip=<%= spec.ip %>
sed -i -e "/$ip/d" /etc/hosts
<%-   if spec.ip != p("hostname") %>
sed -i -e "/$fqdn/d" /etc/hosts
echo "$ip $fqdn" >> /etc/hosts
<%-   end %>
<%- end %>

#Customize container network settings
<%- if p("customize_container_network") == "customized" %>
mkdir -p /etc/docker/
cp ${HARBOR_JOB_DIR}/config/daemon.json /etc/docker/daemon.json -f
<%- end %>


checkStorageRedirect () {

redirect=<%= p("registry_storage_provider.redirect") %>

  case $redirect in
    true)
        sed -i -e '/redirect:/,/disable.* /d' /var/vcap/jobs/harbor/packages/harbor-app/common/templates/registry/config.yml
        sed -i -e '/storage:$/a \ \ redirect:\n \ \ \ \disable: true' /var/vcap/jobs/harbor/packages/harbor-app/common/templates/registry/config.yml
        return
        ;;
    *)
        sed -i -e '/redirect:/,/disable.* /d' /var/vcap/jobs/harbor/packages/harbor-app/common/templates/registry/config.yml
        return
        ;;
  esac
}
<%- if p("registry_storage_provider.redirect") != nil %>
  checkStorageRedirect
<%- end %>


if [ "$HARBOR_PROTOCOL" = "https" ]; then
  #Copy cert to the right place
  mkdir -p $HARBOR_DATA/cert
  mkdir -p $HARBOR_DATA/ca_download

  cp ${HARBOR_JOB_DIR}/config/server.crt $HARBOR_DATA/cert/
  cp ${HARBOR_JOB_DIR}/config/server.key $HARBOR_DATA/cert/
  cp ${HARBOR_JOB_DIR}/config/uaa_ca.crt $HARBOR_DATA/cert/
  cp ${HARBOR_JOB_DIR}/config/ca.crt $HARBOR_DATA/ca_download
  chmod 644  $HARBOR_DATA/ca_download/ca.crt
  cp ${HARBOR_JOB_DIR}/config/trusted_certificates.crt $HARBOR_DATA/cert/

  #For status checking script usage
  CERT_PATH=$CERTS_D/${HARBOR_HOSTNAME}
  mkdir -p $CERT_PATH
  chown vcap:vcap ${CERT_PATH}
  chmod 755 ${CERT_PATH}
  cp $HARBOR_DATA/ca_download/ca.crt ${CERT_PATH}
fi

if [ ! -z "$(cat ${HARBOR_JOB_DIR}/config/gcs_keyfile)" ]; then
  log 'Copy GCS keyfile to /etc/registry'
  chmod 644 ${HARBOR_JOB_DIR}/config/gcs_keyfile
  mkdir -p /etc/registry/
  chmod 755 /etc/registry
  cp ${HARBOR_JOB_DIR}/config/gcs_keyfile /etc/registry/
fi

#Prepare Harbor env
PREPARE_OPTS="--conf ${CFG_FILE}"

#If install optional component Notary
if [ -n "$WITH_NOTARY" ]; then
  PREPARE_OPTS="${PREPARE_OPTS} --with-notary"
fi

#If install optional component Clair
if [ -n "$WITH_CLAIR" ]; then
  PREPARE_OPTS="${PREPARE_OPTS} --with-clair"
fi
PREPARE_OPTS="${PREPARE_OPTS} --with-chartmuseum"

${PYTHON_CMD} ${HARBOR_PACKAGE_DIR}/prepare ${PREPARE_OPTS}

if [ ! -z "$(cat ${HARBOR_JOB_DIR}/config/gcs_keyfile)" ]; then
  log 'Copy GCS keyfile to registry'
  cp ${HARBOR_JOB_DIR}/config/gcs_keyfile ${HARBOR_PACKAGE_DIR}/common/config/registry/
fi

checkHarborVersion() {
  if [ -z "$INSTALLED_HARBOR_VERSION" ]; then
     if $DOCKER_CMD images | grep vmware/harbor-log ; then
       # Harbor was installed which does not write the HARBOR_VERSION_FILE.
       echo 1
     else
       # Harbor was not installed on this machine before.
       echo 2
     fi
  else
    compareVersion $HARBOR_FULL_VERSION $INSTALLED_HARBOR_VERSION
  fi
}

#Load Harbor images
loadImages() {
  result=$(checkHarborVersion)
  if [ $result -le 0 ]; then
    # No need to load the same images twice or images of lower version.
    return
  fi
  waitForDockerd
  #TODO(szou): Add image cleaning here if do migration
  #Load images
  log "Loading docker images ..."
  $DOCKER_CMD load -i $HARBOR_IMAGES_TAR_PATH 2>&1
}

#Upgrade Harbor if higher version of Harbor to be installed
upgradeHarbor() {
  result=$(checkHarborVersion)
  case $result in
    -1)
      log "Can not upgrade Harbor from $INSTALLED_HARBOR_VERSION to $HARBOR_FULL_VERSION. Aborted."
      exit 1
      ;;
    1)
      log "Upgrading Harbor $INSTALLED_HARBOR_VERSION to $HARBOR_FULL_VERSION ..."
      ;;
    2)
      # Harbor is not installed before. No need to upgrade.
      return
      ;;
    0)
      # Already installed. No need to upgrade.
      return
      ;;
  esac
  searchResult=$( $DOCKER_CMD images | grep "vmware/harbor-log" || true )
  if [ -n "$searchResult" ] || [ $(compareVersion $INSTALLED_HARBOR_VERSION "1.6.0") = "-1" ]; then

    MIGRATE_DOCKER_CMD="$DOCKER_CMD run -i --rm -e DB_USR=root -e SKIP_CONFIRM=y "
    HARBOR_MIGRATOR_TAG=$($DOCKER_CMD images | grep harbor-migrator | grep $HARBOR_MIGRATOR_VERSION | awk '{print $2}')
    log "Use harbor-migrator:$HARBOR_MIGRATOR_TAG for migration"
    log "Backing up Harbor database"
    $MIGRATE_DOCKER_CMD -e DB_PWD=$HARBOR_DB_PWD -v /data/database:/var/lib/mysql -v $HARBOR_DB_BACKUP_DIR:/harbor-migration/backup goharbor/harbor-migrator:$HARBOR_MIGRATOR_TAG --db backup

    log "Migrating Harbor database"
    $MIGRATE_DOCKER_CMD -e DB_PWD=$HARBOR_DB_PWD -e PGDATA=/var/lib/postgresql/data -v /data/database:/var/lib/mysql goharbor/harbor-migrator:$HARBOR_MIGRATOR_TAG --db up
    log "Migrating clair DB"
    $MIGRATE_DOCKER_CMD -e PGDATA=/var/lib/postgresql/data  -v /data/clair-db/:/clair-db -v /data/database:/var/lib/postgresql/data goharbor/harbor-migrator:$HARBOR_MIGRATOR_TAG --db up
    log "Migrating notary DB"
    $MIGRATE_DOCKER_CMD -e PGDATA=/var/lib/postgresql/data -v /data/notary-db/:/var/lib/mysql -v /data/database:/var/lib/postgresql/data goharbor/harbor-migrator:$HARBOR_MIGRATOR_TAG --db up
  else
    # Should implement this part if there is any DB schema change after 1.6
    echo "Skip DB upgrade after harbor 1.6.0"
  fi
}

#Start docker daemon
/var/vcap/jobs/docker/bin/ctl start

loadImages
<%- if p("enable_upgrade") -%>
upgradeHarbor
<%- end -%>

#Wait for bosh dns service. uaa.sh depends on it to resolve PKS/PAS UAA FQDN.
/var/vcap/jobs/bosh-dns/bin/wait

#If auth mode is 'uaa_auth' and admin client existing, try to register UAA client for Harbor registry
if [ $AUTH_MODE = 'uaa_auth' ] && [[ ! -z "${UAA_ADMIN// }" ]]; then
  source $HARBOR_JOB_DIR/bin/uaa.sh
  register_harbor_uaa_client
fi

#Save installed harbor version to file
echo $HARBOR_FULL_VERSION > $HARBOR_VERSION_FILE

log "Successfully done!"
exit 0
